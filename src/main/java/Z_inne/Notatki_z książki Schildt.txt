Herbert Schildt - JAVA. Przewodnik dla początkujących
MOJE NOTATKI


Lekcja 5
metody, metody zwracające wartość
Jeśli stworzymy dwie metody o tej samej nazwie ale różnych typach (np. int i float) a potem wywołamy nazwę tej metody to zostanie wywołana ta metoda której zgadza się typ przekazywanego argumentu. 

Klasy piszemy z wielkiej litery, metody i zmienne - z małej.

W Javie możemy dziedziczyć tylko po jednej klasie nadrzędne. Nie ma wielodziedziczenia. Nie można zapisać: "public class Dog extends klasa1, klasa2"

private - dostępne tylko w tej klesie
public - dostępne w całym projekcie
protected - dostępne w klasach pochodnych i klasach z tego pakietu 
nic - modyfikator domyślny - dostępne w klasach z tego samego pakietu


Wyr1 ? Wyr2 : Wyr3   
Sprawdź Wyr 1, jeśli jest Wyr1=true to wykonaj Wyr2, jeśli Wyr1=false to wykonaj wyr3
_________________________

Rozdz.6 Więcej o metodach i klasach
Jeśli przy klasie nie ma modyfikatora dostępu to wtedy jest domyślny: public.

Argumenty metodom można przekazywać przez wartość lub przez referencję (str.165). Raz źródło się modyfikuje( przez wartość) a raz nie (przez referencję).
Jako argumenty można przekazywać też obiekty. Metody mogą również zwracać obiekty jako wynik (return)

Przeciążanie metod - Dwie lub więcej metod w tej samej klasie może mieć tą samą nazwę a różnią się tylko deklaracjami parametrów. Nie wystarczy, że będą się różnić tylko zwracanym typem. Może wystąpić konwersja typów(str. 170). Dzięki temu jedna metoda może realizować działania dla różnych typów danych wejściowych. Nie trzeba dla każdego typu pisać oddzielnej metody.
Sygnatura - tak nazywamy metodę wraz z listą jej parametrów. Bez typu zwracanego przez metodę.
Można też przeciążać konstruktory.

Rekurencja - metoda wywołuje samą siebie. Musi zawierać jakiś warunek aby jeden przebieg programu był bez rekurencji aby program się nie zapętlił na stałe.

Static - jeśli klasa jest static to można używać jej zanim zadeklarujemy pierwszy obiekt tej klasy

Algorytm Quicksort - sortowanie tablicy szybsze niż bąbelkowe

Klasy zagnieżdżone - klasy zadeklarowane wewnątrz innej klasy.
Klasy wewnętrzne - rodzaj klas zagnieżdżonych w których nie użyto słowa static.

Zmienne liczby argumentów (...)

_________________________
Rozdz. 7 Dziedziczenie

Ogólna postać: class klasa-pochodna extends klasa-bazowa{...ciało klasy...}
Klasa pochodna może dziedziczyć tylko po jednej klasie bazowej ( w przeciwieństwie do języka C+)
Hierarchia dziedziczenia - Klasa pochodna może być klasą bazowa dla innej klasy.
Klasa pochodna nie ma dostępu do składowych klasy bazowej oznaczonych jako private.

Konstruktor klasy bazowej tworzy tę część obiektu którą definiuje klasa bazowa, a 
konstruktor klasy pochodnej tworzy tę część obiektu którą definiuje klasa pochodna.

Super - słowo kluczowe. ma dwa zastosowania:
1. Wywołanie konstruktora klasy bazowej
super(lista-parametrów) - wywołanie konstruktora klasy bazowej - musi zawsze występować na początku konstruktora klasy pochodnej.

2. Dostęp do składowych klasy bazowej przesłoniętych przez składową klasy pochodnej. (str.203)
postać ogólna: super.składowa     - składowa może być zmienną lub metodą. Używamy gdy nazwa składowej klasy pochodnej przesłania taką samą nazwę klasy bazowej.

Najpierw wykonywany jest konstruktor klasy bazowej a potem konstruktory klas coraz bardziej pochodnych (str.208)

Referencje klasy bazowej i obiekty klasy pochodnej, czyli co można przypisywać do czego (str.209)

Przesłanianie metod.
Klasa pochodna może mieć taką samą metodę jak klasa bazowa (ten sam zwracany typ i ta sama sygnatura). Wywołanie takiej metody w klasie pochodnej spowoduje wywołanie metody zdefiniowanej w klasie pochodnej. Aby wywołać przysłonietą metodę z klasy bazowej należy użyć słowa super, czyli: "super.nazwa_metody()".

Nie mylmy przesłaniania z przeciążaniem.
Metody przesłonięte - taka sama sygnatura (nazwa + argumenty)
Metody przeciążone - taka sama nazwa metody.

Polimorfizm

Klasy abstrakcyjne (str. 220)________________________

Używamy dla klas, których metody są przesłaniane przez jej klasy pochodne, ale same również muszą posiadać definicje tych metod,
żeby można się było odwołać.

Używamy dla klas, które muszą być przesłoniete w klasach pochodnych bo same nie mają odpowiedniej treści.
    abstract typ nazwaMetody(lista-parametrow); //(metoda ta nie ma ciała, czyli tego co w nawiasach klamrowych{})
Nie można tworzyć obiektów klasy abstrakcyjnej, obiekty mogą być tworzone z klasy pochodnej po tej bazowej abstrakcyjnej.

Final - użycie go przy klasie lub metodzie blokuje możliwośc tworzenia i klas, metod pochodnych (str. 223)

Klasa Object - zdefiniowana domyślnie w javie klasa bazowa wszystkich innych klas. (str.225)

LINK____:   https://youtu.be/gfQjtVZ35bM?list=PLED70A92187B1406A&t=381      - corax o polimorfizmie
LINK____:   https://youtu.be/e-s0LpwFjoI?list=PLED70A92187B1406A&t=59       - corax o klasach abstrakcyjnych i rzutowaniu obiektów

Jeżeli choć jedna metoda w klasie jest jako abstract to cała klasa też musi mieć dopisek abstract.

_________________________
Rozdz. 8 Pakiety i interfejsy (str. 227)

Pakiety - grupy powiązanych klas. Pomagaja organizować kod i tworzą kolejną warstwę hermetyzacji.
Interfejs - definiuje zbiór metod, które zostaną zaimplementowane przez klasę.

Pakiety umożliwiają podział przestrzeni nazw. Klasy w tym samym projekcie a w różnych pakietach mogą mieć tą samą nazwę.
ogólna postać: package nazwa-pakietu
Każdy pakiet tworzy oddzielny katalog na dysku w którym zapisywane są pliki należace do tego pakietu.
Pakiety można zagnieżdżać, zagnieżdżają się wtedy też katalogi.
np. package pakiet1.pakiet2.pakiet3;

Tabela dostępności (str.231) public, private, protected...

Słowo import
import pakiet.klasa 
import pakiet.*    - cała zawartość pakietu                                                                                                                                                             

Przykład wbudowanych pakietów Java (str. 235)
java.lang - ten pakiet jest automatycznie importowany do każdego programu w javie. Inne trzeba importować samemu (słowem import)


Interfejs (str. 235) - Zbiór deklaracji metod i zmiennych bez ciała, abstrakcyjnych
dostęp interface nazwa{....}

Aby zaimplementować interfejs używamy słowa implements
class nazwaKlasy extends klasaBazowa implements nazwaInterfejsu{....}		//extends klasaBazowa - element opcjonalny
zmienne i metody od interfejsu muszą być public.
Interfejsy mogą dzidziczyc po innych interfejsach

Jeśli implementujemy interfejs do klasy abstrakcyjnej to w tej klasie nie musimy definiować metod tego interfejsu. Robimy to w klasach podrzędnych.

Metoda domyślna (str. 246) - default, stosujemy w interfejsie. Jesli zawiera domyślną implementację nie trzeba jej później przesłaniać.


_________________________
Rozdz. 9 Obsługa wyjątków (str. 253)

Podstawowe słowa kluczowe: try, catch, throw, throws, finally
try{monitorowany kod}
catch (typWyjątku1 obiektWyjątku){obsługa dla typu wyjątku nr 1 }
catch (typWyjątku2 obiektWyjątku){obsługa dla typu wyjątku nr 2 }

obiektWyjątku - obiekt przekazywany do klauzuli catch (w książce" exc, należy do klasy throwable, ma swoje metody) po przechwyceniu przez nią wyjątku
Monitorowanie odbywa się w całym kodzie zawartym w bloku try. Monitorowana też jest zawartość metod wywołanych w try.
Pętle try można zagnieżdżać.

Wyjątek możemy utworzyć sami instrukcją throw (str. 262)
throw new nazwaWyjątku();
Throw może też służyć do ponownego wygenerowania wyjątku po jego wcześniejszej obsłudze przez catch (żeby inne catch mogło go jeszcze obsłużyć). Wtedy używamy też rethrow dla nowego try.

Nie trzeba dawać try do głównego kodu. Można zrobić oddzielny blok zajmujący się tylko obsługą błędów (str. 264 list 9.11)

finally (str. 265) - słowem tym oznaczamy blok kodu który ma się wykonać po zakończeniu wykonywania tego co w catch. Rozumiem, że jak nie będzie błedu to catch nie zadziała i finally się nie wykona (jednak chyba zawsze się wykona niezależnie czy błąd zaszedł).

throws (str. 266) - używamy gdy wyjątek trzeba zadeklarować razem z metodą

Jedno catch może przechwytywać kilka różnych wyjątków. Wyjątki łączy się wtedy symbolem "|"

Wyjatki wbudoawane w Javę, niesprawdzane i sprawdzane, tabela. (str. 269)
Łańcuchy wyjątków (gdy jeden wyjatek jest spowodowany przez inny.)

Tworzenie klas pochodnych wyjątków (gdy chce się zrobić swój własny wyjątek).

system.err.println("jakaś wiadomość") - wypisuje coś w konsoli na czerwono (tak jak błędy)

_________________________
Rozdz. 10 Obsługa wejścia i wyjścia (str. 275)
Strumienie bajtowe (InputStream, OutputStream)
Strumienie znakowe (Reader, Writer)

Odczyt z pliku (str. 281)
Zapis do pliku (str. 284)

catch (IOException exc) - IOException jest bazowy dla szczegółowych wyjątków wejscia-wyjścia więc można używać jego jednego zamiast kilku podrzędnych.

try bez close - (str. 286) nowy sposób wywoływania try
Mozna zapisywać-odczytywać z pliku sekwencyjnie albo użyć RandomAccessFile.

Używanie printWriter zamiast sout (str. 297). (do profesjopnalnych zastosowań lepsze od sout.

Klasy opakowujące - konwersja wczytanego np. z klawiatury formatu na inny.

___________________________
ArrayList

ArrayList<Integer> tablica = new ArrayList<Integer>;    //deklaracja

NIE MOŻNA napisać: ArrayList<int> tablica = new ArrayList<int>;

Można dodać na końcu początkową wielkość tablicy:
ArrayList<Integer> tablica = new ArrayList<Integer>(20);
Listy są wolniejsze od zwykłych tablic ale często bardziej użyteczne.

Aby zrobić coś dla wszystkich elementów arraylist używamy: for (int i: tablica){...}